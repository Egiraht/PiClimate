@*
  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  Copyright Â© 2020-2021 Maxim Yudin <stibiu@yandex.ru>
*@

@inject NavigationManager _navigationManager
@inject IUserAuthenticator _authenticator

<ul class="navbar-nav d-flex flex-row flex-lg-column flex-wrap w-100">
  <li class="nav-item px-2">
    <a class="navbar-brand align-baseline mr-2" href="/">
      @nameof(PiClimate) @nameof(Monitor)
    </a>
    <span class="text-sm-left text-secondary align-baseline">
      v@(GetType().Assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion ?? "???")
    </span>
  </li>

  <hr class="d-none d-lg-block border-light w-100 my-2" />

  <li class="flex-fill d-lg-none"></li>

  <li class="nav-item px-2">
    <div class="nav-link text-light">
      <AuthorizeView Context="authContext">
        <Authorized>
          Signed in as <span class="font-weight-bold">@authContext.User.Identity?.Name</span>
        </Authorized>
        <Authorizing>
          Signing in...
        </Authorizing>
        <NotAuthorized>
          You are not signed in
        </NotAuthorized>
      </AuthorizeView>
    </div>
  </li>

  <AuthorizeView>
    <li class="nav-item px-2">
      <a href="@_navigationManager.Uri" @onclick="@_authenticator.SignOutAsync" class="nav-link">
        Sign out
      </a>
    </li>
  </AuthorizeView>

  <hr class="border-light w-100 my-2" />

  <li class="w-100 d-lg-none"></li>

  <AuthorizeView>
    <li class="nav-item p-2">
      <a href="#measurement-menu" data-toggle="collapse" class="nav-link dropdown-toggle">
        Measurements
      </a>
    </li>

    <li id="measurement-menu" class="nav-item bg-secondary rounded w-100 collapse show">
      <ul class="navbar-nav d-flex flex-row flex-lg-column flex-wrap flex-lg-nowrap w-100">
        @* Standard offset links *@
        @foreach (var (name, offset) in StandardOffsets)
        {
          <li class="nav-item px-2">
            <NavLink Match="NavLinkMatch.Prefix" ActiveClass="active" @onclick="() => UpdateCustomPeriod(offset)"
                     href="@($"{Monitor.OffsetPath}/{offset}")" class="nav-link pl-lg-2">
              @name
            </NavLink>
          </li>
        }

        @* Custom period form *@
        <li class="nav-item px-2">
          <a href="#custom-period-form" data-toggle="collapse"
             class="nav-link dropdown-toggle pl-lg-2 collapsed @(IsCustomPeriodActive ? "active" : "")">
            Custom period
          </a>
        </li>

        <li class="w-100 d-lg-none"></li>

        <li id="custom-period-form" class="collapse w-100">
          <div class="nav-item p-2 w-100">
            <EditForm Model="@this" OnValidSubmit="CustomPeriodSubmit" Context="formContext"
                      class="form-row flex-lg-column align-items-end bg-dark rounded w-100 m-0">
              <div class="form-group col-4 col-lg p-2 m-0">
                <label class="text-light">From:</label>
                <InputDate @bind-Value="@CustomPeriodStartDate" class="form-control form-control-sm mb-1" />
                <input @bind="@CustomPeriodStartTime" type="time" class="form-control form-control-sm" />
              </div>

              <div class="form-group col-4 col-lg p-2 m-0">
                <label class="text-light">To:</label>
                <InputDate @bind-Value="@CustomPeriodEndDate" class="form-control form-control-sm mb-1" />
                <input @bind="@CustomPeriodEndTime" type="time" class="form-control form-control-sm" />
              </div>

              <div class="form-group col-4 col-lg p-2 m-0">
                <label class="text-light">
                  Resolution (@MeasurementFilter.MinimalResolution-@MeasurementFilter.MaximalResolution):
                </label>
                <InputNumber @bind-Value="@CustomResolution" class="form-control form-control-sm mb-1"
                             min="@MeasurementFilter.MinimalResolution" max="@MeasurementFilter.MaximalResolution" />
                <button type="submit" class="btn btn-block btn-sm btn-light">Show</button>
              </div>
            </EditForm>
          </div>
        </li>
      </ul>
    </li>
  </AuthorizeView>
</ul>

@code
{
  /// <summary>
  ///   The list of standard offsets to be used for links creation in the measurements menu.
  /// </summary>
  private static readonly Dictionary<string, int> StandardOffsets = new()
  {
    {"Last day", TimePeriods.Day},
    {"Last week", TimePeriods.Week},
    {"Last month", TimePeriods.Month}
  };

  /// <summary>
  ///   Checks or sets if the custom period is active at the moment.
  /// </summary>
  private bool IsCustomPeriodActive => $"/{_navigationManager.ToBaseRelativePath(_navigationManager.Uri)}"
    .StartsWith(Monitor.PeriodPath);

  /// <summary>
  ///   Gets or sets the custom period starting date component.
  /// </summary>
  private DateTime CustomPeriodStartDate { get; set; } = (DateTime.Now - TimeSpan.FromSeconds(TimePeriods.Day)).Date;

  /// <summary>
  ///   Gets or sets the custom period starting time component.
  /// </summary>
  private DateTime CustomPeriodStartTime { get; set; } =
    default(DateTime) + (DateTime.Now - TimeSpan.FromSeconds(TimePeriods.Day)).TimeOfDay;

  /// <summary>
  ///   Gets or sets the custom period ending date component.
  /// </summary>
  private DateTime CustomPeriodEndDate { get; set; } = DateTime.Now.Date;

  /// <summary>
  ///   Gets or sets the custom period ending time component.
  /// </summary>
  private DateTime CustomPeriodEndTime { get; set; } = default(DateTime) + DateTime.Now.TimeOfDay;

  /// <summary>
  ///   Gets or sets the custom period resolution.
  /// </summary>
  private int CustomResolution { get; set; } = MeasurementFilter.DefaultResolution;

  /// <inheritdoc />
  protected override void OnInitialized() => _navigationManager.LocationChanged += (_, _) => StateHasChanged();

  /// <summary>
  ///   Updates the custom period values.
  /// </summary>
  /// <param name="offset">
  ///   The time offset in seconds from the current moment.
  /// </param>
  private void UpdateCustomPeriod(int offset)
  {
    CustomPeriodStartDate = (DateTime.Now - TimeSpan.FromSeconds(offset)).Date;
    CustomPeriodStartTime = default(DateTime) + (DateTime.Now - TimeSpan.FromSeconds(TimePeriods.Day)).TimeOfDay;
    CustomPeriodEndDate = DateTime.Now.Date;
    CustomPeriodEndTime = default(DateTime) + DateTime.Now.TimeOfDay;
    CustomResolution = MeasurementFilter.DefaultResolution;
  }

  /// <summary>
  ///   The callback method handling the custom period button click.
  /// </summary>
  private void CustomPeriodSubmit() => _navigationManager.NavigateTo(
    $"{Monitor.PeriodPath}/{CustomPeriodStartDate + CustomPeriodStartTime.TimeOfDay:s}/{CustomPeriodEndDate + CustomPeriodEndTime.TimeOfDay:s}/{CustomResolution}");
}
