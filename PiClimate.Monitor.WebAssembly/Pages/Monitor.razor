@*
  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  Copyright Â© 2020-2021 Maxim Yudin <stibiu@yandex.ru>
*@

@page "/Monitor/Offset/{Offset:int}/{Resolution:int?}"
@page "/Monitor/Period/{PeriodStart:datetime}/{PeriodEnd:datetime}/{Resolution:int?}"
@attribute [Authorize]
@inject IHttpClientFactory _httpClientFactory

<div class="position-relative d-flex flex-column h-100 @(IsDataUpdating ? "loading" : IsDataAcquisitionFailed ? "failed" : IsDataEmpty ? "empty" : "")"
     data-empty-notice="No measurements found for the period."
     data-failed-notice="Failed to get the measurements.">
  <div class="flex-fill w-100">
    <Chart ChartSettings="@ChartSettings" PeriodStart="@PeriodStart" PeriodEnd="@PeriodEnd" Measurements="@Measurements" />
  </div>

  <div class="position-sticky bottom-0 w-100">
    <DataSummary Measurements="@Measurements" CultureInfo="@ChartSettings.CultureInfo" />
  </div>
</div>

@code
{
  /// <summary>
  ///   Defines the path used for the offset type period definition.
  /// </summary>
  public const string OffsetPath = "/Monitor/Offset";

  /// <summary>
  ///   Defines the path used for the period type period definition.
  /// </summary>
  public const string PeriodPath = "/Monitor/Period";

  /// <summary>
  ///   Gets or sets the time offset in seconds from the current moment to be used for period calculation.
  /// </summary>
  [Parameter]
  public int Offset { get; set; }

  /// <summary>
  ///   Gets or sets the starting timestamp of the period to be displayed.
  /// </summary>
  [Parameter]
  public DateTime PeriodStart { get; set; }

  /// <summary>
  ///   Gets or sets the ending timestamp of the period to be displayed.
  /// </summary>
  [Parameter]
  public DateTime PeriodEnd { get; set; }

  /// <summary>
  ///   Gets or sets the period resolution.
  /// </summary>
  [Parameter]
  public int Resolution { get; set; }

  /// <summary>
  ///   Gets or sets an enumeration of measurements to be displayed on a chart.
  /// </summary>
  private IEnumerable<Measurement>? Measurements { get; set; }

  /// <summary>
  ///   Checks if the measurements data are being updating at the moment.
  /// </summary>
  private bool IsDataUpdating { get; set; }

  /// <summary>
  ///   Checks if the last measurements data acquisition has failed.
  /// </summary>
  private bool IsDataAcquisitionFailed { get; set; }

  /// <summary>
  ///   Checks if empty measurements data have been acquired from the last request.
  /// </summary>
  private bool IsDataEmpty => !IsDataUpdating && !IsDataAcquisitionFailed && Measurements?.Any() != true;

  /// <summary>
  ///   Gets or sets the chart settings object.
  /// </summary>
  private ChartSettings ChartSettings { get; set; } = new() {CultureInfo = LocalizationUtils.GetBrowserCultureInfo()};

  /// <inheritdoc />
  protected override async Task OnParametersSetAsync()
  {
    try
    {
      IsDataAcquisitionFailed = false;
      IsDataUpdating = true;
      StateHasChanged();

      if (Offset != default)
      {
        PeriodStart = DateTime.Now - TimeSpan.FromSeconds(Offset);
        PeriodEnd = DateTime.Now;
      }

      if (Resolution == default)
        Resolution = MeasurementFilter.DefaultResolution;

      using var httpClient = _httpClientFactory.CreateClient();
      var response = await httpClient.PostJsonAsync<MeasurementFilter, JsonPayload<IEnumerable<Measurement>>>(
        ApiEndpoints.MeasurementDataEndpoint, new MeasurementFilter
        {
          PeriodStart = PeriodStart.ToUniversalTime(),
          PeriodEnd = PeriodEnd.ToUniversalTime(),
          Resolution = Resolution
        });

      if (response?.StatusCode == 200)
        Measurements = response!.Data;
      else
        throw new HttpResponseException(response != null
          ? $"[{response.StatusCode}] {response.Description}"
          : "The response object is null.");
    }
    catch (Exception e)
    {
      Console.WriteLine($"Failed to receive the measurements data: {e.Message}");
      IsDataAcquisitionFailed = true;
    }
    finally
    {
      IsDataUpdating = false;
      StateHasChanged();
    }
  }
}
